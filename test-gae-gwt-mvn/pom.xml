<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.test</groupId>
		<artifactId>test-google-mvn-parent</artifactId>
		<version>1.0-SNAPSHOT</version>
	</parent>
	<artifactId>test-gae-gwt-mvn</artifactId>
	<packaging>war</packaging>

  <dependencies>

    <!-- Google App Engine meta-package -->
    <dependency>
      <groupId>net.kindleit</groupId>
      <artifactId>gae-runtime</artifactId>
      <version>${gae.version}</version>
      <type>pom</type>
    </dependency>

    <dependency>
      <groupId>javax.transaction</groupId>
      <artifactId>jta</artifactId>
      <version>1.1</version>
    </dependency>

    <!-- GWT dependencies -->
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-servlet</artifactId>
      <version>${gwt.version}</version>
    </dependency>

    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <version>${gwt.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- J2EE Servlet API. We need it to compile IndexServlet class. You can probably remove
      it, if you don't explicitly use Servlets -->
    <dependency>
      <groupId>org.apache.geronimo.specs</groupId>
      <artifactId>geronimo-servlet_2.5_spec</artifactId>
      <version>1.2</version>
      <scope>provided</scope>
    </dependency>

    <!-- Make use of JSP tags. Remove, if you don't use JSPs -->
    <dependency>
      <artifactId>standard</artifactId>
      <groupId>taglibs</groupId>
      <version>1.1.2</version>
      <type>jar</type>
      <scope>runtime</scope>
    </dependency>

    <!-- These dependencies are here just for enabling logging -->
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>1.6.1</version>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>0.9.24</version>
    </dependency>

    <!-- Test scope -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.5</version>
      <scope>test</scope>
    </dependency>

    <!-- GAE libraries for local testing as described here: http://code.google.com/appengine/docs/java/howto/unittesting.html -->
    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-labs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-api-stubs</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.appengine</groupId>
      <artifactId>appengine-testing</artifactId>
      <version>${gae.version}</version>
      <scope>test</scope>
    </dependency>
	
		<dependency>
			<groupId>javax.jdo</groupId>
			<artifactId>jdo-api</artifactId>
			<version>3.0.1</version>
		</dependency>
		
		<dependency>
		  <groupId>org.datanucleus</groupId>
		  <artifactId>datanucleus-enhancer</artifactId>
		  <version>3.1.1</version>
		</dependency>		

		<dependency>
			<groupId>org.datanucleus</groupId>
			<artifactId>datanucleus-core</artifactId>
			<version>3.1.5</version>
		</dependency>

		<dependency>
			<groupId>org.datanucleus</groupId>
			<artifactId>datanucleus-api-jdo</artifactId>
			<version>3.1.3</version>
		</dependency>
		
		<dependency>
			<groupId>org.datanucleus</groupId>
			<artifactId>datanucleus-jdo-query</artifactId>
			<version>3.0.2</version>
		</dependency>
		

		<dependency>
			<groupId>org.datanucleus</groupId>
			<artifactId>datanucleus-rdbms</artifactId>
			<version>3.1.4</version>
		</dependency>

		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>2.2.4</version>
		</dependency>

		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.20</version>
		</dependency>
		
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>2.9.3</version>
		</dependency>
		
		<dependency>
			<groupId>org.datanucleus</groupId>
			<artifactId>datanucleus-mongodb</artifactId>
			<version>3.1.1</version>
		</dependency>		
		
		<dependency>
		  <groupId>commons-dbcp</groupId>
		  <artifactId>commons-dbcp</artifactId>
		  <version>1.4</version>
		</dependency>
				
		<dependency>
		  <groupId>commons-pool</groupId>
		  <artifactId>commons-pool</artifactId>
		  <version>1.6</version>
		</dependency>		
		  
	
  </dependencies>

  <build>
    <plugins>
      <!-- This plug-in "enhances" your domain model objects (i.e. makes them persistent for
        datanucleus) -->
      <!--plugin>
        <groupId>org.datanucleus</groupId>
        <artifactId>maven-datanucleus-plugin</artifactId>
        <version>1.1.4</version>
        <configuration>
          <mappingIncludes>**/model/*.class</mappingIncludes>
          <verbose>true</verbose>
          <enhancerName>ASM</enhancerName>
          <api>JDO</api>
        </configuration>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>enhance</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-core</artifactId>
            <version>1.1.5</version>
            <exclusions>
              <exclusion>
                <groupId>javax.transaction</groupId>
                <artifactId>transaction-api</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
          <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-rdbms</artifactId>
            <version>1.1.5</version>
          </dependency>
          <dependency>
            <groupId>org.datanucleus</groupId>
            <artifactId>datanucleus-enhancer</artifactId>
            <version>1.1.4</version>
          </dependency>
        </dependencies>
      </plugin-->
	
			<plugin>
				<groupId>org.datanucleus</groupId>
				<artifactId>maven-datanucleus-plugin</artifactId>
				<!-- version>${dn-version}</version -->
				<version>3.1.1</version>
				<configuration>
					<props>target/classes/datanucleus.properties</props>
					<log4jConfiguration>${basedir}/src/main/resources/log4j.properties</log4jConfiguration>
					<!-- verbose>true</verbose> <ddlFile>ddlFile.txt</ddlFile -->
					<completeDdl>true</completeDdl>
				</configuration>
				<executions>
					<execution>
						<phase>process-classes</phase>
						<goals>
							<goal>enhance</goal>
						</goals>
					</execution>
				</executions>
			</plugin>		  

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <version>2.4</version>
        <configuration>
          <webResources>
            <resource>
              <directory>src/main/webapp</directory>
              <filtering>true</filtering>
              <includes>
                <include>**/appengine-web.xml</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <!-- Maven GWT plugin (ex. http://gwt-maven.googlecode.com/svn/docs/maven-googlewebtoolkit2-plugin/index.html)
        http://mojo.codehaus.org/gwt-maven-plugin -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>gwt-maven-plugin</artifactId>
        <version>2.5.1</version>
        <configuration>
          <logLevel>INFO</logLevel>

          <!-- match -Dgae.port -->
          <port>${gae.port}</port>

          <!-- This must point to your GWT modules! -->
          <compileTargets>
            <value>net.kindleit.gae.example.Messages</value>
          </compileTargets>

          <!-- This is for generating Asynch interfaces -->
          <!-- <servicePattern>**/client/*Service.java</servicePattern> -->

          <extraJvmArgs>-Xmx512m</extraJvmArgs>
          <!--<jvm>${JAVA_HOME}/bin/java</jvm> -->
          <!--<noServer>false</noServer> -->

          <!-- TODO This should help running GAE stuff in hosted mode (when gwt-maven-plugin-1.2
            is released, see http://jira.codehaus.org/browse/MGWT-112) -->
          <server>com.google.appengine.tools.development.gwt.AppEngineLauncher
                    </server>

          <runTarget>/index.html</runTarget>
          <style>DETAILED</style>
          <webXml>war/WEB-INF/web.xml</webXml>
          <!-- this parameter is VERY important with automatic mode - has to match the version
            in your declared deps -->
          <!-- if this is set incorrect (not a match), or left out (default is 1.5.2 for 2.0-beta23)
            you will have mysterious errors -->
          <gwtVersion>${gwt.version}</gwtVersion>
        </configuration>
        <executions>
          <!-- <execution> <id>generateAsynch</id> <phase>generate-sources</phase> <goals>
            <goal>generateAsync</goal> </goals> </execution> -->
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- The actual maven-gae-plugin. Type "mvn gae:run" to run project, "mvn gae:deploy"
        to upload to GAE. -->
      <plugin>
        <groupId>net.kindleit</groupId>
        <artifactId>maven-gae-plugin</artifactId>
        <version>0.9.7-SNAPSHOT</version>
		  <configuration>
			  <unpackVersion>${gae.version}</unpackVersion>
			  <appDir>${webappDirectory}</appDir>
			  <sdkDir>${gae.home}</sdkDir>

			  <!-- Add credentials to ~/.m2/settings.xml <id>appengine-credentials</id> -->
			  <serverId>appengine-credentials</serverId>
			  <splitJars>true</splitJars>
		  </configuration>		
      <executions>
          <execution>
              <id>unpack</id>
              <phase>validate</phase>
              <goals>
                  <goal>unpack</goal>
              </goals>
          </execution>
          <execution>
              <id>deploy</id>
              <goals>
                  <goal>deploy</goal>
              </goals>
          </execution>
      </executions>		  
      </plugin>

      <!-- Upload application to the appspot automatically, during release:perform -->
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <goals>gae:deploy</goals>
        </configuration>
      </plugin>

      <!-- Java compiler version -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.1</version>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <!-- Specify hard-coded project properties here -->
  <properties>

    <!-- Sets the project's default encoding.
         http://docs.codehaus.org/display/MAVENUSER/POM+Element+for+Source+File+Encoding -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- This is just for "eclipse:eclipse" goal to always attempt downloading sources -->
    <downloadSources>true</downloadSources>

    <!-- Specify AppEngine version for your project. It should match SDK version pointed to
      by ${gae.home} property (Typically, one used by your Eclipse plug-in) -->
    <gae.version>1.8.6</gae.version>
	<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
  <gae.home>${settings.localRepository}/com/google/appengine/appengine-java-sdk/${gae.version}/appengine-java-sdk-${gae.version}</gae.home>

    <!-- GWT version -->
    <gwt.version>2.5.1</gwt.version>

    <!-- Upload to http://test.latest.<applicationName>.appspot.com by default -->
    <gae.application.version>test</gae.application.version>

    <!-- port defaults to 8080 -->
    <gae.port>8080</gae.port>

    <!-- Produce detailed JS during GWT compilation for development environment -->
    <gwt.style>DETAILED</gwt.style>
  </properties>

  <profiles>

    <!-- We can configure our integration server to activate this profile and perform gae:deploy,
      thus uploading latest snapshot to the http://1.latest.<applicationName>.appspot.com automatically -->
    <profile>
      <id>integration-build</id>
      <properties>
        <gae.application.version>stage</gae.application.version>

        <!-- Produce pretty JS during GWT compilation for test environment -->
        <gwt.style>PRETTY</gwt.style>
      </properties>
    </profile>

    <!-- This profile will activate automatically during release and upload application to
      the http://2.latest.<applicationName>.appspot.com (We might want to set the 2nd version as
      our applications Default version to be accessible at http://<applicationName>.appspot.com) -->
    <profile>
      <id>release-build</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>

      <properties>
        <!-- During release, set application version in appengine-web.xml to 2 -->
        <gae.application.version>release</gae.application.version>

        <!-- Produce compressed JS during GWT compilation for production environment -->
        <gwt.style>OBFUSCATED</gwt.style>
      </properties>
    </profile>
  </profiles>

</project>
